//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpellWork.Controls {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ProcFlagsStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ProcFlagsStrings() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpellWork.Controls.ProcFlagsStrings", typeof(ProcFlagsStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill target (in most cases need XP/Honor reward).
        /// </summary>
        public static string PROC_FLAG_KILL {
            get {
                return ResourceManager.GetString("PROC_FLAG_KILL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Killed by aggressor.
        /// </summary>
        public static string PROC_FLAG_KILLED {
            get {
                return ResourceManager.GetString("PROC_FLAG_KILLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful do periodic (damage / healing, determined from 14-17 flags).
        /// </summary>
        public static string PROC_FLAG_ON_DO_PERIODIC {
            get {
                return ResourceManager.GetString("PROC_FLAG_ON_DO_PERIODIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken spell periodic (damage / healing, determined from 14-17 flags).
        /// </summary>
        public static string PROC_FLAG_ON_TAKE_PERIODIC {
            get {
                return ResourceManager.GetString("PROC_FLAG_ON_TAKE_PERIODIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на On trap activation.
        /// </summary>
        public static string PROC_FLAG_ON_TRAP_ACTIVATION {
            get {
                return ResourceManager.GetString("PROC_FLAG_ON_TRAP_ACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful AoE damage spell hit (not 100% sure unused).
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_AOE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_AOE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful melee auto attack.
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_MELEE_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_MELEE_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful attack by Spell that use melee weapon.
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_MELEE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_MELEE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful negative spell cast (by default only on damage).
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_NEGATIVE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_NEGATIVE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful off-hand melee attacks.
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_OFFHAND_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_OFFHAND_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful AoE (not 100% sure unused).
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_POSITIVE_AOE_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_POSITIVE_AOE_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful cast positive spell (by default only on healing).
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_POSITIVE_SPELL {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_POSITIVE_SPELL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful Ranged auto attack.
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_RANGED_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_RANGED_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Successful Ranged attack by Spell that use ranged weapon.
        /// </summary>
        public static string PROC_FLAG_SUCCESSFUL_RANGED_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_SUCCESSFUL_RANGED_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken any damage.
        /// </summary>
        public static string PROC_FLAG_TAKEN_ANY_DAMAGE {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_ANY_DAMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken AoE damage spell hit (not 100% sure unused).
        /// </summary>
        public static string PROC_FLAG_TAKEN_AOE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_AOE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken damage from melee auto attack hit.
        /// </summary>
        public static string PROC_FLAG_TAKEN_MELEE_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_MELEE_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken damage by Spell that use melee weapon.
        /// </summary>
        public static string PROC_FLAG_TAKEN_MELEE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_MELEE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken negative spell (by default only on damage).
        /// </summary>
        public static string PROC_FLAG_TAKEN_NEGATIVE_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_NEGATIVE_SPELL_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken off-hand melee attacks(not used).
        /// </summary>
        public static string PROC_FLAG_TAKEN_OFFHAND_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_OFFHAND_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken AoE (not 100% sure unused).
        /// </summary>
        public static string PROC_FLAG_TAKEN_POSITIVE_AOE {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_POSITIVE_AOE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken positive spell hit (by default only on healing).
        /// </summary>
        public static string PROC_FLAG_TAKEN_POSITIVE_SPELL {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_POSITIVE_SPELL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken damage from ranged auto attack.
        /// </summary>
        public static string PROC_FLAG_TAKEN_RANGED_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_RANGED_HIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taken damage by Spell that use ranged weapon.
        /// </summary>
        public static string PROC_FLAG_TAKEN_RANGED_SPELL_HIT {
            get {
                return ResourceManager.GetString("PROC_FLAG_TAKEN_RANGED_SPELL_HIT", resourceCulture);
            }
        }
    }
}
